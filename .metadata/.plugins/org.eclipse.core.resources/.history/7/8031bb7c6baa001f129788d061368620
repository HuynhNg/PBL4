package org.pbl4.java;

import java.io.File;
import java.io.IOException;

public class TestServer {

    public static void main(String[] args) throws IOException {
        String path = "D:\\2024\\cnpm"; // Đường dẫn thư mục
        File directory = new File(path);

        // Gọi hàm in cây thư mục
        printDirectoryTree(directory, 0);
    }

    public static void printDirectoryTree(File dir, int level) {
        if (!dir.exists()) {
            System.out.println("Thư mục không tồn tại: " + dir.getAbsolutePath());
            return;
        }

        // In dấu thụt lề theo cấp độ
        for (int i = 0; i < level; i++) {
            System.out.print("    ");
        }

        // Tính kích thước thư mục hoặc file
        long size = calculateSize(dir);

        // In tên thư mục hoặc file kèm kích thước
        if (dir.isDirectory()) {
            System.out.println("|-- " + dir.getName() + "  --  " + size + " bytes (Thư mục)");
        } else {
            System.out.println("|-- " + dir.getName() + "  --  " + size + " bytes (File)");
        }

        // Nếu là thư mục, duyệt tiếp các file và thư mục con
        if (dir.isDirectory()) {
            File[] files = dir.listFiles();
            if (files != null) {
                for (File file : files) {
                    printDirectoryTree(file, level + 1);
                }
            }
        }
    }

    public static long calculateSize(File file) {
        if (file.isFile()) {
            return file.length(); // Kích thước của file
        }

        long totalSize = 0;

        // Nếu là thư mục, tính tổng kích thước của các file/thư mục con
        File[] files = file.listFiles();
        if (files != null) {
            for (File subFile : files) {
                totalSize += calculateSize(subFile); // Đệ quy tính kích thước
            }
        }

        return totalSize;
    }
}


class Test extends Thread {
    private Socket socket;
    private DataInputStream dis;
    private DataOutputStream dos;

    public Test(Socket socket) throws IOException {
        this.socket = socket;
        this.dis = new DataInputStream(socket.getInputStream());
        this.dos = new DataOutputStream(socket.getOutputStream());
    }

    @Override
    public void run() {
        try {
            // Đọc yêu cầu từ client
            String message = dis.readUTF();
            System.out.println("Received from client: " + message);

            // Xử lý yêu cầu "UploadFile"
            if ("UploadFile".equals(message)) {
                UploadFile();
            }

        } catch (Exception e) {
            System.out.println("Error handling client: " + e.getMessage());
            e.printStackTrace();
        } finally {
            // Đảm bảo đóng kết nối sau khi xử lý xong
            try {
                if (dis != null) dis.close();
                if (dos != null) dos.close();
                if (socket != null) socket.close();
            } catch (IOException e) {
                System.out.println("Error closing resources: " + e.getMessage());
            }
        }
    }

    public void UploadFile() {
        try {
            // Đọc thông tin file từ client
            System.out.println("Đang chờ nhận thông tin file...");
            String MSSV = dis.readUTF(); // MSSV
            System.out.println("MSSV: " + MSSV);
            String fileName = dis.readUTF(); // Tên file
            System.out.println("Tên file: " + fileName);
            long fileSize = Long.parseLong(dis.readUTF()); // Kích thước file
            System.out.println("Kích thước file: " + fileSize + " bytes");

            String savePath = "D:\\2024\\PBL4\\FileData\\" + fileName;
            System.out.println("Đang xử lý file: " + fileName);

            // Bắt đầu nhận file
            System.out.println("Bắt đầu nhận file và lưu tại: " + savePath);
            try (BufferedInputStream bis = new BufferedInputStream(socket.getInputStream());
                 FileOutputStream fos = new FileOutputStream(savePath);
                 BufferedOutputStream bos = new BufferedOutputStream(fos)) {

                byte[] buffer = new byte[8192]; // Đồng bộ với buffer client
                long totalBytesRead = 0;
                int bytesRead;

                while (totalBytesRead < fileSize && (bytesRead = bis.read(buffer, 0, buffer.length)) != -1) {
                    bos.write(buffer, 0, bytesRead);
                    totalBytesRead += bytesRead;
                    System.out.println("Đã nhận được: " + totalBytesRead + " / " + fileSize + " bytes");
                }

                bos.flush();

                if (totalBytesRead == fileSize) {
                    System.out.println("Đã nhận đầy đủ file và lưu tại: " + savePath);
                    dos.writeUTF("Upload successful");
                } else {
                    System.out.println("Cảnh báo: File nhận không đầy đủ! Đã nhận: " + totalBytesRead + " / " + fileSize);
                    dos.writeUTF("Upload incomplete");
                }
            }
        } catch (IOException e) {
            System.out.println("Lỗi khi nhận file: " + e.getMessage());
            e.printStackTrace();
            try {
                dos.writeUTF("Upload failed");
            } catch (IOException ex) {
                System.out.println("Lỗi khi gửi phản hồi lỗi: " + ex.getMessage());
            }
        }
    }
}
